  import React, { useContext, useEffect, useState } from 'react';
  import { 
    View, Text, TouchableOpacity, StyleSheet, Modal, SafeAreaView, TextInput, 
    Alert, Animated, Keyboard, TouchableWithoutFeedback, ScrollView, KeyboardAvoidingView, Platform 
  } from 'react-native';
  import { ThemeContext } from '../context/ThemeContext';
  import { colors } from '../config/theme';
  import { Ionicons, MaterialIcons } from '@expo/vector-icons';
  import StyledText from '../components/texts/StyledText';
  import getEnvVars from './config';
  import AsyncStorage from '@react-native-async-storage/async-storage';

  const predefinedMessages = [
    { id: 1, description:"–í–Ω–∏–º–∞–Ω–∏–µ! –°–∫–∏–¥–∫–∞ 20%", text: "üî• –í–Ω–∏–º–∞–Ω–∏–µ! –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ —É—Å–ª—É–≥–∏! üî• –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üìû –í–∞—à_–Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞  üìç –≥. –®—ã–º–∫–µ–Ω—Ç, ...", icon: 'cash-outline' },
    { id: 2, description:"–ü–æ–ª–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–≤—Ç–æ —Å 15% —Å–∫–∏–¥–∫–æ–π", text: "üöó –ü–æ–ª–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–≤—Ç–æ —Å 15% —Å–∫–∏–¥–∫–æ–π! –¢–æ–ª—å–∫–æ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏! –ó–∞–ø–∏—Å—å: üìû –í–∞—à_–Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìç –≥. –®—ã–º–∫–µ–Ω—Ç, ...", icon: 'cart-outline' },
    { id: 3, description:"–•–∏–º—á–∏—Å—Ç–∫–∞ —Å–∞–ª–æ–Ω–∞ —Å –±–æ–Ω—É—Å–æ–º!", text: "‚ú® –•–∏–º—á–∏—Å—Ç–∫–∞ —Å–∞–ª–æ–Ω–∞ —Å –±–æ–Ω—É—Å–æ–º! –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é! üìç –ù–∞—à –∞–¥—Ä–µ—Å: –≥. –®—ã–º–∫–µ–Ω—Ç, ... üìû –ó–∞–ø–∏—Å—å: –í–∞—à_–Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞ ", icon: 'card-outline' },
    { id: 4, description:"–ü–æ–¥–∞—Ä–æ–∫ –∑–∞ –≤–∞—à –≤–∏–∑–∏—Ç! –õ—é–±–∞—è —É—Å–ª—É–≥–∞ ‚Äì –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤–æ—Å–∫–æ–º!", text: "üåü –ü–æ–¥–∞—Ä–æ–∫ –∑–∞ –≤–∞—à –≤–∏–∑–∏—Ç! –õ—é–±–∞—è —É—Å–ª—É–≥–∞ ‚Äì –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤–æ—Å–∫–æ–º! üìû –ó–∞–ø–∏—Å—å: –í–∞—à_–Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞  üìç –≥. –®—ã–º–∫–µ–Ω—Ç, ...", icon: 'gift' }
  ];

  const SalarySettingsScreen = ({ navigation }) => {
    const { apiUrl } = getEnvVars();
    const { theme } = useContext(ThemeContext);
    const activeColors = colors[theme.mode];
    const [modalVisible, setModalVisible] = useState(false);

    const [message, setMessage] = useState('');
    const [phone, setPhone] = useState('+77024574566');
    const [address, setAddress] = useState('–≥. –®—ã–º–∫–µ–Ω—Ç, –î—É–ª–∞—Ç–∏ 183');
    const fadeAnim = useState(new Animated.Value(0))[0];

    useEffect(() => {
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 1000,
        useNativeDriver: true,
      }).start();
    }, []);

    const sendNewsletter = async () => {
      if (!message.trim()) {
        Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
        return;
      }

      try {
        const token = await AsyncStorage.getItem('access_token_avtosat');
        if (!token) {
          Alert.alert('–û—à–∏–±–∫–∞', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          return;
        }

        const response = await fetch(`${apiUrl}/api/Loyalty/NewsLetter`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ message: message.replace('{phone}', phone).replace('{address}', address) }),
        });

        if (response.ok) {
          Alert.alert('–£—Å–ø–µ—Ö', '–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
          setMessage('');
        } else {
          Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
      } catch (error) {
        Alert.alert('–û—à–∏–±–∫–∞', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        console.error('–û—à–∏–±–∫–∞:', error);
      }
    };

    return (
      <KeyboardAvoidingView
        behavior={Platform.OS === "ios" ? "padding" : "height"}
        style={{ flex: 1 }}
      >
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <SafeAreaView style={[{ backgroundColor: activeColors.primary }, styles.container]}>
            <View style={styles.header}>
            <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
              <Ionicons name="arrow-back" size={24} color={activeColors.tint} />
            </TouchableOpacity>
              <StyledText style={[styles.headerTitle, { color: activeColors.tint }]}>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</StyledText>
            </View>

            {/* –ü–∞–º—è—Ç–∫–∞ –ø–µ—Ä–µ–¥ —à–∞–±–ª–æ–Ω–∞–º–∏ */}
            <View style={[styles.noteContainer, { backgroundColor: activeColors.secondary }]}>
            <TouchableOpacity onPress={() => setModalVisible(true)}>
              <Ionicons name="information-circle-outline" size={34} color={activeColors.tint} />
              </TouchableOpacity>
              <Text style={[styles.noteText, { color: activeColors.tint }]}>
                –≠—Ç–æ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å, –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
              </Text>
            </View>
            

            <ScrollView style={styles.templatesContainer}>
              {predefinedMessages.map((item) => (
                <TouchableOpacity 
                  key={item.id}
                  style={[styles.templateCard, { backgroundColor: activeColors.secondary }]} 
                  onPress={() => setMessage(item.text)}
                >
                  <Ionicons name={item.icon} size={24} color={activeColors.tint} />
                  <Text style={[styles.templateText, { color: activeColors.tint }]}>{item.description}</Text>
                </TouchableOpacity>
              ))}
            </ScrollView>
            <View style={[styles.noteContainer, { backgroundColor: activeColors.secondary }]}>
              <Ionicons name="mail-outline" size={34} color={activeColors.tint} />
              <Text style={[styles.noteText, { color: activeColors.tint }]}>
                –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              </Text>
            </View>
            <TextInput
              style={[styles.messageInput, { borderColor: activeColors.secondary, color: activeColors.tint }]}
              value={message}
              onChangeText={setMessage}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
              placeholderTextColor={activeColors.tint}
              multiline
            />
<Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)}
      >
        <TouchableWithoutFeedback onPress={() => setModalVisible(false)}>
          <View style={styles.modalOverlay}>
            <View style={[styles.modalContent, { backgroundColor: activeColors.primary }]}>
              <Text style={[styles.modalText, { color: activeColors.tint }]}>
                –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å–µ—â–∞–ª–∏ –≤–∞—à —Ü–µ–Ω—Ç—Ä.
              </Text>
              <TouchableOpacity
                style={[styles.modalButton, { backgroundColor: activeColors.accent }]}
                onPress={() => setModalVisible(false)}
              >
                <Text style={[styles.modalButtonText, { color: activeColors.primary }]}>–ó–∞–∫—Ä—ã—Ç—å</Text>
              </TouchableOpacity>
            </View>
          </View>
        </TouchableWithoutFeedback>
      </Modal>
            <TouchableOpacity style={[styles.sendButton, { backgroundColor: activeColors.accent }]} onPress={sendNewsletter}>
              <Text style={[styles.sendButtonText, { color: activeColors.primary }]}>üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å</Text>
            </TouchableOpacity>
          </SafeAreaView>
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
    );
  };

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      padding: 20,
      backgroundColor: '#F5F5F5',
    },
    header: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      padding: 10,
      paddingTop: 20,
    },
    backButton: {
      position: 'absolute',
      left: 10,
    },
    headerTitle: {
      fontSize: 20,
      fontWeight: 'bold',
    },
    input: {
      height: 40,
      borderWidth: 1,
      borderRadius: 10,
      padding: 10,
      marginBottom: 10,
    },
    messageInput: {
      height: 100,
      borderWidth: 1,
      borderRadius: 10,
      padding: 10,
      marginBottom: 10,
      textAlignVertical: 'top',
    },
    noteContainer: {
      flexDirection: 'row',
      alignItems: 'center',
      padding: 15,
      borderRadius: 10,
      marginBottom: 10,
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.1,
      shadowRadius: 4,
      elevation: 3,
    },
    noteText: {
      fontSize: 14,
      lineHeight: 20,
      marginLeft: 10,
      flex: 1,
    },
    templatesContainer: {
      flex: 1,
      marginBottom: 10,
    },
    templateCard: {
      flexDirection: 'row',
      alignItems: 'center',
      padding: 15,
      marginVertical: 5,
      borderRadius: 10,
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.1,
      shadowRadius: 4,
      elevation: 3,
    },
    templateText: {
      fontSize: 14,
      marginLeft: 10,
    },
    sendButton: {
      padding: 15,
      borderRadius: 10,
      alignItems: 'center',
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.1,
      shadowRadius: 4,
      elevation: 3,
    },
    noteContainer: {
      flexDirection: 'row',
      alignItems: 'center',
      padding: 15,
      borderRadius: 10,
      marginBottom: 10,
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.1,
      shadowRadius: 4,
      elevation: 3,
    },
    noteText: {
      fontSize: 14,
      lineHeight: 20,
      marginLeft: 10,
      flex: 1,
    },
    modalOverlay: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
    },
    modalContent: {
      width: '80%',
      padding: 20,
      borderRadius: 10,
      alignItems: 'center',
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.25,
      shadowRadius: 4,
      elevation: 5,
    },
    modalText: {
      fontSize: 16,
      marginBottom: 20,
      textAlign: 'center',
    },
    modalButton: {
      padding: 10,
      borderRadius: 5,
      width: '100%',
      alignItems: 'center',
    },
    modalButtonText: {
      fontSize: 16,
      fontWeight: 'bold',
    },
    sendButtonText: {
      fontSize: 16,
      fontWeight: 'bold',
    },
  });

  export default SalarySettingsScreen;